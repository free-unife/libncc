\input texinfo
@settitle libncc Manual

@copying
Copyright @copyright{} 2016 Franco Masotti @email{franco.masotti@@student.unife.it}

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
@end copying

@titlepage
@title libncc Documentation
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top
@top libncc

This manual is for libncc.
@end ifnottex

@menu
* Description::    A brief description of what this is all about.
* API Description::    A thorough description of the API.
* Usage::    How to use the library in you program.
* Library Flags:: Description of all the possibile flags used.
* Internal Description::    A brief description of the internals.
* Index::            Complete index.
@end menu

@node Description
@chapter Description
libncc is a static C library which provides data structures and operations to 
handle:
@itemize @bullet
@item
lists

@item
stacks

@item
queues

@end itemize
This library is based on the LISPs' functional list functions. From those 
functions more complex operations to handle stack and queues can be written.

@node API Description
@chapter API Description

Everything described in this chapter can be found in @file{/include/libncc.h}.

@section Variable Definitions

@deftp {typedef} _node list
@end deftp

@deftp {typedef} _node stack
@end deftp

@deftp {typedef} _node queue
@end deftp


@section Function Descriptions
@subsection Functional operations

@deftypefn{List} bool list_null @ (list @var{l})
Check if a list is @code{NULL}.
@end deftypefn

@deftypefn{List} element list_head @ (list @var{l})
Extracts the first element of the list.
@end deftypefn

@deftypefn{List} list list_next @ (list @var{l})
Gets the pointer of the next node of a list.
@end deftypefn

@deftypefn{List} int list_length @ (list @var{l})
Returns the length of a list.
@end deftypefn

@deftypefn{List,Stack,Queue} bool list_same @ (list @var{l1}, list @var{l2})
Checks if the @code{element} part of two @code{_node} objects are equal.
@end deftypefn

@deftypefn{List,Stack,Queue} bool list_equal @ (list @var{l1}, list @var{l2})
Checks if the two @code{_node} object sets are equal.
@end deftypefn

@deftypefn{Stack} bool stack_null @ (stack @var{s})
Checks if a stack is @code{NULL}.
@end deftypefn

@deftypefn{Stack} int stack_length @ (stack @var{s})
Computes the number of elements in the stack.
@end deftypefn

@deftypefn{Queue} bool queue_null @ (queue @var{q})
Checks if a queue is @code{NULL}.
@end deftypefn

@deftypefn{Queue} int queue_length @ (queue @var{q})
Computes the number of elements in the queue.
@end deftypefn


@subsection Non-functional operations

@deftypefn{List} void list_init @ (list * @var{lRef})
Sets the input list to @code{NULL}.
@end deftypefn

@deftypefn{List} void list_append @ (element e, list * @var{lRef})
Adds an element to the tail of the list.
@end deftypefn

@deftypefn{List} void list_prepend @ (element e, list * @var{lRef})
Adds an element to the head of the list.
@end deftypefn

@deftypefn{List,Stack,Queue} void list_remove @ (list * @var{head}, list @var{toRemove})
Removes a specified element from a @code{_node} object set.
@end deftypefn

@deftypefn{List,Stack,Queue} void list_destroy @ (list * @var{lRef})
Destroy a @code{_node} object set from the specified statring point.
@end deftypefn

@deftypefn{Stack} void stack_init @ (stack * @var{sRef})
Sets the input stack to @code{NULL}.
@end deftypefn

@deftypefn{Stack} element stack_pop @ (stack * @var{sRef})
Gets the first element and frees its corresponding @code{_node} object of the 
stack.
@end deftypefn

@deftypefn{Stack} void stack_push @ (element @var{e}, stack * @var{sRef})
Inserts a new element in the the stack.
@end deftypefn

@deftypefn{Queue} void queue_init @ (queue * @var{qRef})
Sets the input queue to @code{NULL}.
@end deftypefn

@deftypefn{Queue} element queue_dequeue @ (queue * @var{qRef})
Removes the tail element from the queue.
@end deftypefn

@deftypefn{Queue} void queue_enqueue @ (element @var{e}, queue * @var{qRef})
Adds an element from the queue.
@end deftypefn


@node Usage
@chapter Usage
@section Example

@verbatiminclude example.c

@section Building and Linking

To build the static library into the `libncc.a` file:

@command{make libncc TYPE=@var{typedef struct or native C type}}

To link the library:

@code{gcc -o example.out example.c libncc.a}

@node Library Flags
@chapter Library Flags
@section C Flags

This library is written in ANSI C99. 
Compilation flags follow:

@option{-g -Wall -Wextra -Wpedantic -Werror -march=native -O0 -lrt -std=c99}

@section Indent Flags

GNU indentation options have been used:

@option{-nbad -bap -nbc -bbo -bl -bli2 -bls -ncdb -nce -cp1 -cs -di2 -ndj -nfc1-nfca -hnl -i2 -ip5 -lp -pcs -psl -nsc -nsob}

@bye

